#pragma kernel CSMain
#define THREAD_BLOCK_SIZE 16
#include "NoiseUtils.cginc"

RWStructuredBuffer<float3> PositionBuffer;
RWStructuredBuffer<float> AlphaBuffer;
RWStructuredBuffer<float4x4> RotationMatrixBuffer;

float _Time;

float4x4 matRotateZ(float rad)
{
    return float4x4(cos(rad), -sin(rad), 0, 0,
					sin(rad), cos(rad), 0, 0,
					0, 0, 1, 0,
					0, 0, 0, 1);
}

[numthreads(THREAD_BLOCK_SIZE, 1, 1)]
void CSMain(uint id : SV_DispatchThreadID)
{
    int size = 10;
    float time = _Time * 0.05;
    float2 uv = float2((float) (id % size) / (float) size, (float) (id / size) / (float) size);
    float2 uv2 = uv;
    uv.y += time;

    float dim = 12.0;
    float n = perlin(uv, dim, time);

    float3 pos = PositionBuffer[id];
    pos.y = 6.0+(n*0.2);
    pos.z -= 0.05;
    float alpha = AlphaBuffer[id];
    if (pos.z<=-17)
    {
        pos.z = 17;
        alpha = 0.0;
    }
    else
    {
        if (alpha<=1)
        {
            alpha += (1.0 - alpha)*0.03;
        }
    }
    PositionBuffer[id] = pos;
    AlphaBuffer[id] = alpha;

    float4x4 rmat = RotationMatrixBuffer[id];

    float dir = 1.0;
    if (fmod(id, 3.0) >= 1.0)
        dir = -1.0;
    float rad = (_Time * 0.005 * (fmod(id, 100.0) * 10.0) * degToRad) * dir;
    float4x4 rotZ = matRotateZ(rad);
    RotationMatrixBuffer[id] = rotZ;
}